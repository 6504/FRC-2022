// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.commands.SeqCommands.CustomWaitCommand;
import frc.robot.commands.SeqCommands.DriveDistance;
import frc.robot.commands.SeqCommands.IntakeDown;
import frc.robot.commands.SeqCommands.IntakeInCommand;
import frc.robot.commands.SeqCommands.IntakeOffCommand;
import frc.robot.commands.SeqCommands.IntakeOutCommand;
import frc.robot.commands.SeqCommands.IntakeUp;
import frc.robot.commands.SeqCommands.TurnDegrees;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.ParallelCommandGroup;
import edu.wpi.first.wpilibj2.command.PrintCommand;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj2.command.WaitCommand;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj.PS4Controller;
import edu.wpi.first.wpilibj.XboxController;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();//contains all subsytems

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final DriveSubsystem m_driveSubsystem = new DriveSubsystem();
  public final IntakeSubsystem m_intakeSubsystem = new IntakeSubsystem();
  public final ClimbSubsystem m_climbSubsystem = new ClimbSubsystem();

// Joysticks
private final PS4Controller pS4DriveController = new PS4Controller(0);
private final XboxController xboxController = new XboxController(1);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    /*SmartDashboard.putData("Drive Command", new DriveCommand(m_driveSubsystem));
    SmartDashboard.putData("Intake Command", new IntakeCommand(m_intakeSubsystem));
    SmartDashboard.putData("Climb Command", new ClimbCommand(m_climbSubsystem));
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand(m_driveSubsystem, m_intakeSubsystem));
*/
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putNumber("delay for all", 0);
    SmartDashboard.putNumber("kP for turning", 0.055);
    SmartDashboard.putNumber("kD for turning", 0.03); //.035

    //m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand(m_driveSubsystem, m_intakeSubsystem));//TODO:add other sub
    /*m_chooser.setDefaultOption("Intake down then up", 
    new SequentialCommandGroup(
      new CustomWaitCommand(1),
      new IntakeDown(m_intakeSubsystem),
      new IntakeUp(m_intakeSubsystem)
    ));*/
    
    m_chooser.setDefaultOption("Drive backward", 
    new SequentialCommandGroup(
      new CustomWaitCommand(1),
      new DriveDistance(m_driveSubsystem, -36)
    ));
    m_chooser.setDefaultOption("do nothing", 
    new SequentialCommandGroup(
      new CustomWaitCommand(1)
    ));
    m_chooser.setDefaultOption("Drive forward", 
    new SequentialCommandGroup(
      new CustomWaitCommand(1),
      new DriveDistance(m_driveSubsystem, 18)
    ));
    //--PICK UP OUTSIDE BALL AND DROP BOTH BALLS
    m_chooser.setDefaultOption("2BallAuto", 
    new SequentialCommandGroup(
      new CustomWaitCommand(1),
      new IntakeDown(m_intakeSubsystem),//face robot outward
      new IntakeInCommand(m_intakeSubsystem),//pick up ball 2
      new DriveDistance(m_driveSubsystem, 33), //need tuning
      new WaitCommand(1.5),
      new IntakeOffCommand(m_intakeSubsystem),
      new IntakeUp(m_intakeSubsystem),
      new TurnDegrees(m_driveSubsystem, 180),
      new DriveDistance(m_driveSubsystem, 66), //120-36=84
      new IntakeOutCommand(m_intakeSubsystem)
    ));

     m_chooser.setDefaultOption("3BallAuto (Predump first)", 
    new SequentialCommandGroup(
      new CustomWaitCommand(1),
      //--ORIGINAL BALL DUMP
      new DriveDistance(m_driveSubsystem, 18),
      new IntakeOutCommand(m_intakeSubsystem),
      new WaitCommand(1),
      new IntakeOffCommand(m_intakeSubsystem),//dumped pre-load
      //--TURN AROUND AND INTAKE DOWN
      new DriveDistance(m_driveSubsystem, -12),//moving back a little for turn//needs tuning
      // new ParallelCommandGroup(
      new TurnDegrees(m_driveSubsystem, 180),
      new IntakeDown(m_intakeSubsystem),
      // ),
      //--MOVE FORWARD AND INTAKE ON HALFWAY
      new DriveDistance(m_driveSubsystem, 50), //needs tuning
      new IntakeInCommand(m_intakeSubsystem),
      new DriveDistance(m_driveSubsystem, 20), //needs tuning//got the ball
      new IntakeOffCommand(m_intakeSubsystem),
      //--PICKED UP BALL 2, PICKING UP BALL 3
      new TurnDegrees(m_driveSubsystem, 205), //needs tuning
      new IntakeInCommand(m_intakeSubsystem),
      new DriveDistance(m_driveSubsystem, 42.5), //needs tuning
      new IntakeOffCommand(m_intakeSubsystem),
      new TurnDegrees(m_driveSubsystem, 105),
      //--MOVE TO UNLOAD BALL 2 & 3
      new ParallelCommandGroup(
        new IntakeUp(m_intakeSubsystem),
        new DriveDistance(m_driveSubsystem, 105)//driving to drop ball 3
      ),
      //--UNLOAD BALLS
      new IntakeOutCommand(m_intakeSubsystem)
    ));

    /*m_chooser.setDefaultOption("3BallAuto (Pickup first/twoBallAuto extended)", 
    new SequentialCommandGroup(
      //--TWO BALL AUTO
      new IntakeDown(m_intakeSubsystem),
      new IntakeInCommand(m_intakeSubsystem),
      new DriveDistance(m_driveSubsystem, 25), //need tuning
      new WaitCommand(1.5),
      new IntakeOffCommand(m_intakeSubsystem),
      new IntakeUp(m_intakeSubsystem),
      new TurnDegrees(m_driveSubsystem, 180),
      new DriveDistance(m_driveSubsystem, 120),
      new IntakeOutCommand(m_intakeSubsystem),
      //-- GETTING BALL 3
      new TurnDegrees(m_driveSubsystem, -120),
      new ParallelCommandGroup(
        new IntakeDown(m_intakeSubsystem),
        new DriveDistance(m_driveSubsystem, 85)
      ),
      new IntakeInCommand(m_intakeSubsystem),
      new DriveDistance(m_driveSubsystem, 20)
      new TurnDegrees(m_driveSubsystem, 120),
      //--MOVE TO UNLOAD BALL 3
      new ParallelCommandGroup(
        new IntakeUp(m_intakeSubsystem),
        new DriveDistance(m_driveSubsystem, 105)//driving to drop ball 3
      ),
      //--UNLOAD BALLS
      new IntakeOutCommand(m_intakeSubsystem)
    ));*/

    m_chooser.addOption("Ball Dump", 
      new SequentialCommandGroup(
        new CustomWaitCommand(7),
        new DriveDistance(m_driveSubsystem, 18),
        new IntakeOutCommand(m_intakeSubsystem),
        new WaitCommand(1),
        new IntakeOffCommand(m_intakeSubsystem),
        new DriveDistance(m_driveSubsystem, -80)));

    m_chooser.addOption("Turn 90", 
      new SequentialCommandGroup(
        new CustomWaitCommand(7),
        new TurnDegrees(m_driveSubsystem, 90.0)));

    SmartDashboard.putData("Auto Mode", m_chooser);
    
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS

    
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public PS4Controller getPS4DriveController() {
      return pS4DriveController;
    }

    public XboxController getXboxController()
    {
      return xboxController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

