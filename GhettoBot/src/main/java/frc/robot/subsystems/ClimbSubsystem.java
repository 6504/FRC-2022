// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.revrobotics.CANSparkMax;
import com.revrobotics.SparkMaxPIDController;
import com.revrobotics.SparkMaxRelativeEncoder;
import com.revrobotics.CANSparkMax.ControlType;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Timer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.Spark;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

public class ClimbSubsystem extends SubsystemBase {
  private CANSparkMax climbArmLeft;
  private CANSparkMax climbArmRight;
  private CANSparkMax reachMotor;
  private MotorControllerGroup pivotArmMotorControllerGroup;
  private DigitalInput reachLowerLimit;
  private double lastDashboardUpdateTime = Timer.getFPGATimestamp();

  private SparkMaxPIDController m_pidControllerLeft, m_pidControllerRight;
  public double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput;

  private boolean isHoldingArmPosition = false;
  
  public ClimbSubsystem() {
    climbArmLeft = new CANSparkMax(17, MotorType.kBrushless);
    climbArmLeft.setInverted(true);
    climbArmLeft.setIdleMode(IdleMode.kBrake);

    // PID coefficients
    kP = 0.4; 
    kI = 1e-4;
    kD = 1; 
    kIz = 0; 
    kFF = 0; 
    kMaxOutput = 1; 
    kMinOutput = -1;

    m_pidControllerLeft = climbArmLeft.getPIDController();
    
    m_pidControllerLeft.setP(kP);
    m_pidControllerLeft.setI(kI);
    m_pidControllerLeft.setD(kD);
    m_pidControllerLeft.setIZone(kIz);
    m_pidControllerLeft.setFF(kFF);
    m_pidControllerLeft.setOutputRange(kMinOutput, kMaxOutput);

    climbArmRight = new CANSparkMax(16, MotorType.kBrushless);
    climbArmRight.setInverted(false);
    climbArmRight.setIdleMode(IdleMode.kBrake);

    m_pidControllerRight = climbArmRight.getPIDController();

    m_pidControllerRight.setP(kP);
    m_pidControllerRight.setI(kI);
    m_pidControllerRight.setD(kD);
    m_pidControllerRight.setIZone(kIz);
    m_pidControllerRight.setFF(kFF);
    m_pidControllerRight.setOutputRange(kMinOutput, kMaxOutput);

    pivotArmMotorControllerGroup = new MotorControllerGroup(climbArmRight, climbArmLeft);

    reachMotor = new CANSparkMax(14, MotorType.kBrushless);
    reachMotor.setInverted(true);
    reachMotor.setIdleMode(IdleMode.kBrake);

    reachLowerLimit = new DigitalInput(0);
  }

  @Override
  public void periodic() {
    if (Timer.getFPGATimestamp() - lastDashboardUpdateTime > 1)
    {
      SmartDashboard.putBoolean("Climb at lower limit", reachLowerLimit.get());
      SmartDashboard.putNumber("Climb Position", reachMotor.getEncoder().getPosition());
      SmartDashboard.putNumber("Swing Position", climbArmLeft.getEncoder().getPosition());
      
      lastDashboardUpdateTime = Timer.getFPGATimestamp();
    }

    if(reachLowerLimit.get()){
      reachMotor.getEncoder().setPosition(0);
    }
  }

  @Override
  public void simulationPeriodic() {
    // This method will be called once per scheduler run during simulation
  }

  public void reachUp() {
    if (reachMotor.getEncoder().getPosition() >= 357)
    {
      stopReach();
    }
    else
    {
      reachMotor.set(1);
    }
  }
  public void reachDown() {
    // Go down unless lower limit is hit
    if (!reachLowerLimit.get())
    {
      reachMotor.set(-1);
    }
    else
    {
      stopReach();
    }
  }

  public void stopReach()
  {
    reachMotor.set(0);
  }

  public void armForward() {
    isHoldingArmPosition = false;
    pivotArmMotorControllerGroup.set(0.2);
  }
  public void armBackward() {
    isHoldingArmPosition = false;
    pivotArmMotorControllerGroup.set(-0.2);
  }

  public void stopArms() {
    if (false == isHoldingArmPosition)
    {
      pivotArmMotorControllerGroup.set(0);

      // Hold current position
      double curPositionLeft = climbArmLeft.getEncoder().getPosition();
      m_pidControllerLeft.setReference(curPositionLeft, ControlType.kPosition);

      double curPositionRight = climbArmRight.getEncoder().getPosition();
      m_pidControllerRight.setReference(curPositionRight, ControlType.kPosition);
      isHoldingArmPosition = true;
    }
  }

}
